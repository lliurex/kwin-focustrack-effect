// This file is generated by kconfig_compiler_kf5 from options.kcfg.
// All changes you do to this file will be lost.

#include "FocusTrackConfig.h"

#include <qglobal.h>
#include <QFile>

class FocusTrackConfigHelper
{
  public:
    FocusTrackConfigHelper() : q(nullptr) {}
    ~FocusTrackConfigHelper() { delete q; q = nullptr; }
    FocusTrackConfigHelper(const FocusTrackConfigHelper&) = delete;
    FocusTrackConfigHelper& operator=(const FocusTrackConfigHelper&) = delete;
    FocusTrackConfig *q;
};
Q_GLOBAL_STATIC(FocusTrackConfigHelper, s_globalFocusTrackConfig)
FocusTrackConfig *FocusTrackConfig::self()
{
  if (!s_globalFocusTrackConfig()->q) {
    new FocusTrackConfig;
    s_globalFocusTrackConfig()->q->read();
  }

  return s_globalFocusTrackConfig()->q;
}

FocusTrackConfig::FocusTrackConfig( )
  : KConfigSkeleton( QStringLiteral( "kwinrc" ) )
{
  Q_ASSERT(!s_globalFocusTrackConfig()->q);
  s_globalFocusTrackConfig()->q = this;
  setCurrentGroup( QStringLiteral( "Effect-Ù‹FocusTrack" ) );

  KConfigSkeleton::ItemUInt  *itemBorderColor;
  itemBorderColor = new KConfigSkeleton::ItemUInt( currentGroup(), QStringLiteral( "borderColor" ), mBorderColor, 0 );
  addItem( itemBorderColor, QStringLiteral( "borderColor" ) );
  KConfigSkeleton::ItemUInt  *itemBorderWidth;
  itemBorderWidth = new KConfigSkeleton::ItemUInt( currentGroup(), QStringLiteral( "borderWidth" ), mBorderWidth, 0 );
  addItem( itemBorderWidth, QStringLiteral( "borderWidth" ) );
}

FocusTrackConfig::~FocusTrackConfig()
{
  if (s_globalFocusTrackConfig.exists() && !s_globalFocusTrackConfig.isDestroyed()) {
    s_globalFocusTrackConfig()->q = nullptr;
  }
}

